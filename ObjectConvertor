package com.voxlearning.utopia.service.newexam.impl.util;

import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

/**
 * @Auther: majianxin
 * @Date: 2018/4/19
 * @Description: 相同类名，字段名类转换
 */
public class ObjectConvertor {

    public static <K, V> V toAnotherObj(K oneObj, Class<V> anotherClassObj) {
        return toAnotherObj(oneObj, anotherClassObj, null);
    }

    public static <K, V> V toAnotherObjFilterSerial(K oneObj, Class<V> anotherClassObj) {
        return toAnotherObj(oneObj, anotherClassObj, field -> !"serialVersionUID".equals(field.getName()));
    }

    public static <K, V> V toAnotherObj(K oneObj, Class<V> anotherClassObj, ReflectionUtils.FieldFilter filter) {
        V anotherObj = null;
        try {
            anotherObj = anotherClassObj.newInstance();
            Class<?> oneClassObj = oneObj.getClass();
            Field[] fields = getMatchedFields(oneClassObj, filter);
            for (Field field : fields) {
                String fieldName = field.getName();
                String append = Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
                String getMethodName = "get" + append;
                String setMethodName = "set" + append;
                Method getMethod = oneClassObj.getDeclaredMethod(getMethodName);
                getMethod.setAccessible(true);
                Object attrForOneObj = getMethod.invoke(oneObj);
                Method setMethod = anotherClassObj.getDeclaredMethod(setMethodName, field.getType());
                setMethod.setAccessible(true);
                setMethod.invoke(anotherObj, attrForOneObj);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return anotherObj;
    }

    private static Field[] getMatchedFields(Class<?> classObj, ReflectionUtils.FieldFilter filter) {
        List<Field> matchedFields = new ArrayList<>();
        Field[] fields = classObj.getDeclaredFields();
        for (Field field : fields) {
            if (null == filter || filter.matches(field)) {
                matchedFields.add(field);
            }
        }

        return matchedFields.toArray(new Field[]{});
    }
}
